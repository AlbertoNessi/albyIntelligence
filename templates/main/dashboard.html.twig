{% extends 'base.html.twig' %}

{% block body %}
    <div class="container-fluid mt-5">
        <div class="row">
            <div class="col-2"></div>
            <div class="col-8 px-md-4">
                <form>
                    <div class="row">
                        <div class="form-floating mx-auto p-2">
                            <textarea class="form-control" placeholder="Chiedi quello che vuoi" id="userMessage"></textarea>
                            <label for="userMessage">How can I help you? You can ask me about your contacts, emails, messages and more...</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="text-end">
                            <button type="submit" class="btn btn-dark" id="sendUserMessageBtn">Send</button>
                        </div>
                    </div>
                    <div class="row">
                        <small>When are we having dad's birthday party?</small>
                        <small>Where are we having dad's birthday party?</small>
                        <small>Show all the data of the contacts</small>
                        <small>Show all the data of the contact named Marta Bellini</small>
                        <small>what is the name of the contact with email marta.bellini@gmail.com?</small>
                        <small>Show the name of the contacts that have gmail as their email provider</small>
                        <br>
                        <br>
                        <small>what is the capital of france?</small>
                        <small>what is 100 + 1.9?</small>
                        <small>What is the largest number? 1.1 or 1.9?</small>
                    </div>
                    <div class="row">
                        <div id="responseContainer"></div>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

{% block js %}
    <script>
        // Event listener for the send button
        $('#sendUserMessageBtn').on('click', function(event) {
            event.preventDefault();
            let message = $('#userMessage').val().trim();

            // Input validation
            if (message === "") {
                showAlert('Please enter a message before sending.', 'warning');
                return;
            }

            // Disable the send button and show a loading indicator (optional)
            $('#sendUserMessageBtn').prop('disabled', true).text('Sending...');
            $('#loadingSpinner').show();

            // AJAX request to the backend
            $.ajax({
                url: '{{ path('searchInsideSemanticIndex_url') }}',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ message: message }),
                success: function(response) {
                    console.log('Server Response:', response); // For debugging purposes

                    let responseData;

                    // Check if 'choices' exists and is an array
                    if (response['choices'] && Array.isArray(response['choices'])) {
                        try {
                            // Attempt to parse the 'content' field as JSON
                            responseData = JSON.parse(response['choices'][0]['message']['content']);
                            console.log('Parsed Content:', responseData);

                            if (responseData['result']) {
                                showResponse(responseData['result']);
                            } else {
                                // If 'result' is not present, display an appropriate message
                                let errorMessage = responseData['error'] || "No result found.";
                                showResponse(errorMessage);
                            }
                        } catch (e) {
                            console.error('JSON Parsing Error:', e);
                            // If parsing fails, treat 'content' as a simple string
                            let fallbackResponse = response['choices'][0]['message']['content'] || "No data available.";
                            showResponse(fallbackResponse);
                        }
                    } else if (response['result']) {
                        // Handle cases where 'result' is directly in the response
                        showResponse(response['result']);
                    } else if (response['error']) {
                        // Handle error messages
                        showResponse(`<strong>Error:</strong> ${escapeHtml(response['error'])}`);
                    } else {
                        // Handle unexpected response structures
                        showResponse("Nessun dato disponibile.");
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Error:', status, error);
                    showAlert('Error! Failed to send data.', 'danger');
                },
                complete: function() {
                    // Re-enable the send button and reset its text
                    $('#sendUserMessageBtn').prop('disabled', false).text('Send');
                    $('#loadingSpinner').hide(); // Hide the loading spinner
                    // Clear the textarea after request completion
                    $('#userMessage').val('');
                }
            });
        });

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        function capitalizeFirstLetter(string) {
            if (typeof string !== 'string') return string;
            return string.charAt(0).toUpperCase() + string.slice(1);
        }

        function showResponse(responseData) {
            let responseHtml = `
            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">Response</h5>`;

            if (typeof responseData === 'object' && responseData !== null) {
                if (Array.isArray(responseData)) {
                    // Handle array of objects (e.g., multiple contacts)
                    if (responseData.length === 0) {
                        responseHtml += `<p class="card-text">Nessun dato disponibile.</p>`;
                    } else {
                        // Dynamically generate table headers based on the keys of the first object
                        let tableHeaders = Object.keys(responseData[0]).map(key => `<th>${escapeHtml(capitalizeFirstLetter(key))}</th>`).join('');

                        // Dynamically generate table rows
                        let tableRows = responseData.map(item => {
                            let row = '<tr>';
                            for (let key in item) {
                                if (item.hasOwnProperty(key)) {
                                    row += `<td>${escapeHtml(item[key])}</td>`;
                                }
                            }
                            row += '</tr>';
                            return row;
                        }).join('');

                        responseHtml += `
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    ${tableHeaders}
                                </tr>
                            </thead>
                            <tbody>
                                ${tableRows}
                            </tbody>
                        </table>`;
                    }
                } else {
                    // Handle single object (e.g., a specific contact)
                    responseHtml += '<table class="table table-bordered">';
                    responseHtml += '<thead><tr><th>Field</th><th>Value</th></tr></thead><tbody>';

                    for (const key in responseData) {
                        if (responseData.hasOwnProperty(key)) {
                            responseHtml += `
                            <tr>
                                <td>${escapeHtml(capitalizeFirstLetter(key))}</td>
                                <td>${escapeHtml(responseData[key])}</td>
                            </tr>`;
                        }
                    }

                    responseHtml += '</tbody></table>';
                }
            } else {
                // Display string responses as plain text
                responseHtml += `<p class="card-text">${escapeHtml(responseData)}</p>`;
            }

            responseHtml += `
                </div>
            </div>`;

            // Append the response to the container
            $("#responseContainer").html(responseHtml);
        }

        function showAlert(message, type) {
            let alertHtml = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${escapeHtml(message)}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>`;
            $("#alertContainer").html(alertHtml);

            setTimeout(function() {
                $(".alert").alert('close');
            }, 5000);
        }
    </script>
{% endblock %}

